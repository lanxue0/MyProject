// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(50) @unique
  password String @db.VarChar(50)
  email String @db.VarChar(50)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  profile UserProfile?
  exams Exam[]
  answers Answer[]
  questions Question[]
  
  // 班级关系
  createdClassrooms Classroom[]       // 用户创建的班级（老师）
  joinedClassrooms ClassroomStudent[] // 用户加入的班级（学生）
  teachingClassrooms ClassroomTeacher[] // 用户作为教师加入的班级（非创建者）
}

model UserProfile {
  id Int @id @default(autoincrement())
  gender String @db.VarChar(10) @default("男")
  birthDate DateTime?
  userType String @db.VarChar(20) @default("STUDENT")
  bio String? @db.Text
  region String? @db.VarChar(100)
  
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
}

model Tag {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  description String? @db.Text
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  
  // Parent-child relationship
  parentId Int? 
  parent Tag? @relation("TagHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Tag[] @relation("TagHierarchy")
  
  // Many-to-many relationship with Exam
  exams ExamTag[]
  
  // Many-to-many relationship with Question
  questions QuestionTag[]
}

model Exam {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  isPublish Boolean @default(false)
  isDelete Boolean @default(false)
  hasSubjective Boolean @default(false)
  content String @db.Text
  totalScore Int @default(0)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  createUserId Int
  createUser User @relation(fields: [createUserId], references: [id])

  answers Answer[]
  
  // Many-to-many relationship with Tag
  tags ExamTag[]
  
  // 添加发布记录关系
  publishRecords ExamPublishRecord[]
}

// Junction table for Exam-Tag many-to-many relationship
model ExamTag {
  examId Int
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
  
  tagId Int
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  
  @@id([examId, tagId])
}

model Answer {
  id Int @id @default(autoincrement())
  content String @db.Text
  score Int
  acuracy Float
  isGraded Boolean @default(false)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt

  answererId Int
  answerer User @relation(fields: [answererId], references: [id])

  examId Int
  exam Exam @relation(fields: [examId], references: [id])
}

// New model for the Question Bank
model Question {
  id Int @id @default(autoincrement())
  type String @db.VarChar(20) // "radio", "checkbox", "input", "judge", "essay"
  question String @db.Text
  options String? @db.Text // JSON string of options for radio, checkbox, judge
  score Int
  answer String @db.Text
  answerAnalyse String @db.Text
  difficulty Int @default(2) // 0-5, 0最简单，5最难，默认值为2(中等)
  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  
  // Relation to the creator
  creatorId Int
  creator User @relation(fields: [creatorId], references: [id])
  
  // Many-to-many relationship with Tag
  tags QuestionTag[]
}

// Junction table for Question-Tag many-to-many relationship
model QuestionTag {
  questionId Int
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  tagId Int
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  assignedAt DateTime @default(now())
  
  @@id([questionId, tagId])
}

model Classroom {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  code        String   @db.VarChar(6) @unique
  description String?  @db.Text
  createTime  DateTime @default(now())
  updateTime  DateTime @updatedAt

  // 创建者（老师）
  creatorId   Int
  creator     User     @relation(fields: [creatorId], references: [id])
  
  // 班级中的学生
  students    ClassroomStudent[]
  
  // 班级中的其他教师（非创建者）
  teachers    ClassroomTeacher[]
  
  // 添加发布记录关系
  publishRecords ExamPublishRecord[]
}

// 班级-学生关联表
model ClassroomStudent {
  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  
  studentId   Int
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  joinTime    DateTime  @default(now())
  
  @@id([classroomId, studentId])
}

// 班级-教师关联表（非创建者）
model ClassroomTeacher {
  classroomId Int
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  
  teacherId   Int
  teacher     User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  
  joinTime    DateTime  @default(now())
  
  @@id([classroomId, teacherId])
}

model ExamPublishRecord {
  id          Int      @id @default(autoincrement())
  examId      Int
  classroomId Int
  publishTime DateTime @default(now())
  
  // 修改关系，添加级联删除
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  @@unique([examId, classroomId])
}